{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["apiQuotes","newQuote","quote","Math","floor","random","length","author","document","getElementById","innerText","text","classList","add","remove","a","fetch","response","json","console","log","getQuote","App","className","id","onClick","twitterUrl","window","open","tweetQuote","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOAIMA,G,MAAY,IAEhB,SAASC,IAEP,IAAMC,EAAQF,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,SACxDJ,EAAMK,OAGTC,SAASC,eAAe,UAAUC,UAAYR,EAAMK,OAFpDC,SAASC,eAAe,UAAUC,UAAY,UAI5CR,EAAMS,KAAKL,OAAS,GACtBE,SAASC,eAAe,SAASG,UAAUC,IAAI,cAE/CL,SAASC,eAAe,SAASG,UAAUE,OAAO,cAEpDN,SAASC,eAAe,SAASC,UAAYR,EAAMS,K,4CAGpD,4BAAAI,EAAA,4DAEkB,8BAFlB,kBAI4BC,MAFV,+BAFlB,cAIWC,EAJX,gBAKuBA,EAASC,OALhC,OAKKlB,EALL,OAMKC,IANL,kDASOkB,QAAQC,IAAI,kBAAZ,MATP,2D,0DAmBCC,GAyBWC,MAxBb,WACE,OACI,sBAAKC,UAAU,kBAAkBC,GAAG,kBAApC,UAEI,sBAAKD,UAAU,aAAf,UACE,mBAAGA,UAAU,sBACb,sBAAMC,GAAG,aAGX,qBAAKD,UAAU,eAAf,SACE,sBAAMC,GAAG,aAGb,sBAAKD,UAAU,mBAAf,UACE,wBAAQA,UAAU,iBAAiBE,QAAS,kBApBtD,WACE,IAAMC,EAAU,gDAA4ClB,SAASC,eAAe,SAASC,UAA7E,cAA4FF,SAASC,eAAe,UAAUC,WAC9IiB,OAAOC,KAAKF,EAAY,UAkBiCG,IAAcL,GAAG,UAAUM,MAAM,cAAlF,SACE,mBAAGP,UAAU,qBAEf,wBAAQE,QAAS,kBAAKxB,KAAYuB,GAAG,YAArC,8BC/CGO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.2628a9ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './App.css';\r\n  \r\n  let apiQuotes = [];\r\n  \r\n  function newQuote() {\r\n    // Pick a random quote from data array\r\n    const quote = apiQuotes[Math.floor(Math.random() * apiQuotes.length)];\r\n    if (!quote.author) {\r\n      document.getElementById('author').innerText = 'Unknown';\r\n    } else {\r\n      document.getElementById('author').innerText = quote.author;\r\n    } \r\n    if (quote.text.length > 50) {\r\n      document.getElementById('quote').classList.add('long-quote')\r\n    } else {\r\n      document.getElementById('quote').classList.remove('long-quote');\r\n    }\r\n    document.getElementById('quote').innerText = quote.text;\r\n  }\r\n\r\n   async function getQuote() {\r\n      /*const proxyUrl = 'https://cors-anywhere.herokuapp.com/'*/\r\n      const apiUrl = 'https://type.fit/api/quotes';\r\n      try {\r\n        const response = await fetch(apiUrl);\r\n        apiQuotes = await response.json();\r\n        newQuote(apiQuotes);\r\n      } catch (error) {\r\n        //Catch Error Here\r\n          console.log('whoops, noquote', error);\r\n      }\r\n   }\r\n\r\n  //  Tweet Quote \r\n  function tweetQuote() {\r\n    const twitterUrl = `https://twitter.com/intent/tweet?text=${document.getElementById('quote').innerText} - ${document.getElementById('author').innerText}`;\r\n    window.open(twitterUrl, '_blank');\r\n  }\r\n      // loading();\r\n    getQuote(); \r\n  function App(){\r\n    return (\r\n        <div className=\"quote-container\" id=\"quote-container\">\r\n          {/* Quote */}\r\n            <div className=\"quote-text\">\r\n              <i className=\"fas fa-quote-left\"></i>\r\n              <span id=\"quote\" />\r\n            </div>\r\n            {/* Author */}\r\n            <div className=\"quote-author\" >\r\n              <span id='author'></span>\r\n            </div>\r\n          {/* Buttons */}\r\n          <div className=\"button-container\">\r\n            <button className=\"twitter-button\" onClick={()=> tweetQuote()} id=\"twitter\" title=\"Tweet This!\">\r\n              <i className=\"fab fa-twitter\"></i>\r\n            </button>\r\n            <button onClick={()=> newQuote()} id=\"new-quote\">New Quote</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}